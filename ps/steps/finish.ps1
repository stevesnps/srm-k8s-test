class Lock : Step {

	static [string] hidden $description = @'
Your deployment configuration will cause this wizard to	generate a
config.json file containing one or more fields with password/key
values.

These field values will be protected by a password you supply.

Note: You must remember your config.json password for your
initial deployment and future upgrades.
'@

	Lock([Config] $config) : base(
		[Lock].Name, 
		$config, 
		'Lock Config JSON', 
		[Lock]::description, 
		'Enter your config.json password') {}

	[IQuestion]MakeQuestion([string] $prompt) {
		$question = new-object ConfirmationQuestion($prompt)
		$question.isSecure = $true
		$question.blacklist = @("'")
		return $question
	}

	[bool]HandleResponse([IQuestion] $question) {
		$global:configPwd = $question.response
		return $true
	}

	[bool]CanRun() {
		return $this.config.ShouldLock()
	}
}

class Finish : Step {

	static [string] hidden $description = @'
You have specified what's necessary to generate the config.json file
that you will use to run the helm prep script to produce helm commands,
value(s) files, and any required prerequisite K8s YAML resources.

This is likely the last time you will run this tool.

The next step will be to run the run-helm-prep.ps1 script generated by
this tool. You will rerun the script when reinstalling or upgrading
SRM using the deployment configuration you specified.
'@

	Finish([Config] $config) : base(
		[Finish].Name, 
		$config,
		'Finish',
		[Finish]::description,
		'Are you ready to generate your run-helm-prep.ps1 script?') {}

	[IQuestion]MakeQuestion([string] $prompt) {

		$options = @(
			[tuple]::create('&Save Script', 'Save your run-helm-prep.ps1 script')
		)
		return new-object MultipleChoiceQuestion($prompt, $options, 0)
	}

	[bool]HandleResponse([IQuestion] $question) {

		$configJson = [IO.Path]::GetFullPath((Join-Path $this.config.workDir 'config.json'))

		if ($this.config.ShouldLock()) {
			$this.config.Lock($global:configPwd)	
		}
		$this.config | ConvertTo-Json | Out-File $configJson

		$runSetupScriptPath = [IO.Path]::GetFullPath((Join-Path $this.config.workDir './run-helm-prep.ps1'))
		Write-Host "`nWriting $runSetupScriptPath..."
		"& '$([IO.Path]::GetFullPath((Join-Path $PSScriptRoot '../helm-prep.ps1')))' -configPath '$configJson'" | Out-File $runSetupScriptPath

		$this.PrintNotes()
		Write-Host "`nGenerate/re-generate helm command and required resource YAMLs by running: `n  pwsh ""$runSetupScriptPath""`n"

		return $true
	}

	[void]PrintNotes() {

		if ($this.config.notes.count -eq 0) {
			return
		}

		Write-Host "`n---`nInstallation Notes:`n"
		$notesPrinted = New-Object Collections.Generic.HashSet[string]

		$allNotes = @()
		$this.config.notes | ForEach-Object {
			$note = $_.value
			if (-not $notesPrinted.Contains($note)) {
				$notesPrinted.Add($note) | Out-Null
				$allNotes += $note
			}
		}
		$allNotes | Sort-Object | ForEach-Object {
			Write-Host $_
		}
		Write-Host "`n---`n"
	}
}