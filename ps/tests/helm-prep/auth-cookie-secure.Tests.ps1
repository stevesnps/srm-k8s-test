using module @{ModuleName='guided-setup'; RequiredVersion='1.16.0' }

$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

Import-Module 'pester' -ErrorAction SilentlyContinue
if (-not $?) {
	Write-Host 'Pester is not installed, so this test cannot run. Run pwsh, install the Pester module (Install-Module Pester), and re-run this script.'
	exit 1
}

BeforeAll {
  'common.ps1',
	'../../build/yaml.ps1',
	'../../external/powershell-algorithms/data-structures.ps1',
  '../../keyvalue.ps1',
  '../../build/protect.ps1',
  '../../config.ps1' | ForEach-Object {
		Write-Debug "'$PSCommandPath' is including file '$_'"
		$path = Join-Path $PSScriptRoot $_
		if (-not (Test-Path $path)) {
			Write-Error "Unable to find file script dependency at $path. Please download the entire srm-k8s GitHub repository and rerun the downloaded copy of this script."
		}
		. $path | out-null
	}
}

Describe 'Indicating HTTPS will be used' {

	It 'Configuration should request auth cookie Secure attribute' {

		New-Mocks

		$testDrivePath = Get-TestDriveDirectoryInfo
		$workDirPath = $testDrivePath.FullName.Replace('\','\\')
		$configJsonPath = Join-Path $testDrivePath 'config.json'

		# a default config.json (before system system was available) with Tool Orchestration
		@'
		{
		"configVersion": "1.5",
		"namespace": "srm",
		"releaseName": "srm",
		"workDir": "~/.k8s-srm",
		"srmLicenseFile": "srm-web-license",
		"scanFarmSastLicenseFile": "",
		"scanFarmScaLicenseFile": "",
		"sigRepoUsername": "",
		"sigRepoPwd": "",
		"scanFarmDatabaseHost": "",
		"scanFarmDatabasePort": "",
		"scanFarmDatabaseUser": "",
		"scanFarmDatabasePwd": "",
		"scanFarmDatabaseSslMode": "",
		"scanFarmDatabaseServerCert": "",
		"scanFarmScanDatabaseCatalog": "",
		"scanFarmStorageDatabaseCatalog": "",
		"scanFarmRedisHost": "",
		"scanFarmRedisPort": "",
		"scanFarmRedisDatabase": "",
		"scanFarmRedisUseAuth": false,
		"scanFarmRedisPwd": "",
		"scanFarmRedisSecure": false,
		"scanFarmRedisVerifyHostname": false,
		"scanFarmRedisServerCert": "",
		"scanFarmStorageType": "",
		"scanFarmStorageBucketName": "",
		"scanFarmCacheBucketName": "",
		"scanFarmS3UseServiceAccountName": false,
		"scanFarmS3AccessKey": "",
		"scanFarmS3SecretKey": "",
		"scanFarmS3ServiceAccountName": "",
		"scanFarmS3Region": "",
		"scanFarmGcsProjectName": "",
		"scanFarmGcsSvcAccountKey": "",
		"scanFarmAzureStorageAccount": "",
		"scanFarmAzureStorageAccountKey": "",
		"scanFarmAzureSubscriptionId": "",
		"scanFarmAzureTenantId": "",
		"scanFarmAzureResourceGroup": "",
		"scanFarmAzureEndpoint": "",
		"scanFarmAzureClientId": "",
		"scanFarmAzureClientSecret": "",
		"scanFarmMinIOHostname": "",
		"scanFarmMinIOPort": "",
		"scanFarmMinIORootUsername": "",
		"scanFarmMinIORootPwd": "",
		"scanFarmMinIOSecure": false,
		"scanFarmMinIOVerifyHostname": false,
		"scanFarmMinIOServerCert": "",
		"scanFarmStorageHasInClusterUrl": false,
		"scanFarmStorageInClusterUrl": "",
		"scanFarmStorageIsProxied": true,
		"scanFarmStorageContextPath": "upload",
		"scanFarmStorageExternalUrl": "",
		"useGeneratedPwds": true,
		"mariadbRootPwd": "",
		"mariadbReplicatorPwd": "",
		"srmDatabaseUserPwd": "",
		"adminPwd": "",
		"toolServiceApiKey": "",
		"minioAdminPwd": "",
		"k8sProvider": "Other",
		"kubeApiTargetPort": "443",
		"clusterCertificateAuthorityCertPath": "",
		"csrSignerName": "",
		"createSCCs": false,
		"scanFarmType": 0,
		"skipDatabase": false,
		"useTriageAssistant": true,
		"skipScanFarm": true,
		"skipToolOrchestration": false,
		"skipMinIO": false,
		"skipNetworkPolicies": true,
		"skipTls": true,
		"workflowStorageType": "OnCluster",
		"serviceAccountToolService": "",
		"serviceAccountWorkflow": "",
		"toolServiceReplicas": 0,
		"dbSlaveReplicaCount": 0,
		"externalDatabaseHost": "",
		"externalDatabasePort": 3306,
		"externalDatabaseName": "",
		"externalDatabaseUser": "",
		"externalDatabasePwd": "",
		"externalDatabaseSkipTls": false,
		"externalDatabaseTrustCert": false,
		"externalDatabaseServerCert": "",
		"externalWorkflowStorageEndpoint": "",
		"externalWorkflowStorageEndpointSecure": false,
		"externalWorkflowStorageUsername": "",
		"externalWorkflowStoragePwd": "",
		"externalWorkflowStorageBucketName": "",
		"externalWorkflowStorageTrustCert": false,
		"externalWorkflowStorageCertChainPath": "",
		"addExtraCertificates": false,
		"extraTrustedCaCertPaths": null,
		"webServiceType": "ClusterIP",
		"webServicePortNumber": "9090",
		"webServiceAnnotations": [],
		"skipIngressEnabled": true,
		"ingressType": "ClusterIP",
		"ingressClassName": "",
		"ingressAnnotations": [],
		"ingressHostname": "",
		"ingressTlsSecretName": "",
		"ingressTlsType": "",
		"useSaml": false,
		"useLdap": false,
		"samlHostBasePath": "",
		"samlIdentityProviderMetadataPath": "",
		"samlAppName": "",
		"samlKeystorePwd": "",
		"samlPrivateKeyPwd": "",
		"skipDockerRegistryCredential": true,
		"dockerImagePullSecretName": "",
		"dockerRegistry": "",
		"dockerRegistryUser": "",
		"dockerRegistryPwd": "",
		"useDefaultDockerImages": true,
		"imageVersionWeb": "",
		"imageVersionMariaDB": "",
		"imageVersionTo": "",
		"imageVersionMinio": "",
		"imageVersionWorkflow": "",
		"useDockerRedirection": false,
		"useDockerRepositoryPrefix": false,
		"dockerRepositoryPrefix": "",
		"useDefaultCACerts": true,
		"caCertsFilePath": "",
		"caCertsFilePwd": "",
		"useCPUDefaults": false,
		"webCPUReservation": "",
		"dbMasterCPUReservation": "",
		"dbSlaveCPUReservation": "",
		"toolServiceCPUReservation": "",
		"minioCPUReservation": "",
		"workflowCPUReservation": "",
		"useMemoryDefaults": false,
		"webMemoryReservation": "",
		"dbMasterMemoryReservation": "",
		"dbSlaveMemoryReservation": "",
		"toolServiceMemoryReservation": "",
		"minioMemoryReservation": "",
		"workflowMemoryReservation": "",
		"useEphemeralStorageDefaults": false,
		"webEphemeralStorageReservation": "",
		"dbMasterEphemeralStorageReservation": "",
		"dbSlaveEphemeralStorageReservation": "",
		"toolServiceEphemeralStorageReservation": "",
		"minioEphemeralStorageReservation": "",
		"workflowEphemeralStorageReservation": "",
		"useVolumeSizeDefaults": false,
		"webVolumeSizeGiB": 0,
		"dbVolumeSizeGiB": 0,
		"dbSlaveVolumeSizeGiB": 0,
		"dbSlaveBackupVolumeSizeGiB": 0,
		"minioVolumeSizeGiB": 0,
		"storageClassName": "",
		"systemSize": "Small",
		"useNodeSelectors": false,
		"webNodeSelector": null,
		"masterDatabaseNodeSelector": null,
		"subordinateDatabaseNodeSelector": null,
		"toolServiceNodeSelector": null,
		"minioNodeSelector": null,
		"workflowControllerNodeSelector": null,
		"toolNodeSelector": null,
		"useTolerations": false,
		"webNoScheduleExecuteToleration": null,
		"masterDatabaseNoScheduleExecuteToleration": null,
		"subordinateDatabaseNoScheduleExecuteToleration": null,
		"toolServiceNoScheduleExecuteToleration": null,
		"minioNoScheduleExecuteToleration": null,
		"workflowControllerNoScheduleExecuteToleration": null,
		"toolNoScheduleExecuteToleration": null,
		"authCookieSecure": true,
		"notes": [],
		"salts": [],
		"isLocked": false,
		"scanFarmScaApiUrlOverride": ""
		}
'@.Replace('~/.k8s-srm', $workDirPath) | Out-File $configJsonPath

		$licenseFilePath = Join-Path $TestDrive 'srm-web-license'
		Write-Output $null > $licenseFilePath

		. (Join-Path $PSScriptRoot ../../helm-prep.ps1) -configPath $configJsonPath

		$valuesPath = Join-Path $TestDrive 'chart-values-combined/values-combined.yaml'

		$yaml = Get-Yaml $valuesPath

		$yaml.GetKeyValue(('web','props','auth','cookie','secure')) | Should -BeExactly 'true'
	}
}

Describe 'Indicating HTTPS will not be used' {

	It 'Configuration should not request auth cookie Secure attribute' {

		New-Mocks

		$testDrivePath = Get-TestDriveDirectoryInfo
		$workDirPath = $testDrivePath.FullName.Replace('\','\\')
		$configJsonPath = Join-Path $testDrivePath 'config.json'

		# a default config.json (before system system was available) with Tool Orchestration
		@'
		{
		"configVersion": "1.5",
		"namespace": "srm",
		"releaseName": "srm",
		"workDir": "~/.k8s-srm",
		"srmLicenseFile": "srm-web-license",
		"scanFarmSastLicenseFile": "",
		"scanFarmScaLicenseFile": "",
		"sigRepoUsername": "",
		"sigRepoPwd": "",
		"scanFarmDatabaseHost": "",
		"scanFarmDatabasePort": "",
		"scanFarmDatabaseUser": "",
		"scanFarmDatabasePwd": "",
		"scanFarmDatabaseSslMode": "",
		"scanFarmDatabaseServerCert": "",
		"scanFarmScanDatabaseCatalog": "",
		"scanFarmStorageDatabaseCatalog": "",
		"scanFarmRedisHost": "",
		"scanFarmRedisPort": "",
		"scanFarmRedisDatabase": "",
		"scanFarmRedisUseAuth": false,
		"scanFarmRedisPwd": "",
		"scanFarmRedisSecure": false,
		"scanFarmRedisVerifyHostname": false,
		"scanFarmRedisServerCert": "",
		"scanFarmStorageType": "",
		"scanFarmStorageBucketName": "",
		"scanFarmCacheBucketName": "",
		"scanFarmS3UseServiceAccountName": false,
		"scanFarmS3AccessKey": "",
		"scanFarmS3SecretKey": "",
		"scanFarmS3ServiceAccountName": "",
		"scanFarmS3Region": "",
		"scanFarmGcsProjectName": "",
		"scanFarmGcsSvcAccountKey": "",
		"scanFarmAzureStorageAccount": "",
		"scanFarmAzureStorageAccountKey": "",
		"scanFarmAzureSubscriptionId": "",
		"scanFarmAzureTenantId": "",
		"scanFarmAzureResourceGroup": "",
		"scanFarmAzureEndpoint": "",
		"scanFarmAzureClientId": "",
		"scanFarmAzureClientSecret": "",
		"scanFarmMinIOHostname": "",
		"scanFarmMinIOPort": "",
		"scanFarmMinIORootUsername": "",
		"scanFarmMinIORootPwd": "",
		"scanFarmMinIOSecure": false,
		"scanFarmMinIOVerifyHostname": false,
		"scanFarmMinIOServerCert": "",
		"scanFarmStorageHasInClusterUrl": false,
		"scanFarmStorageInClusterUrl": "",
		"scanFarmStorageIsProxied": true,
		"scanFarmStorageContextPath": "upload",
		"scanFarmStorageExternalUrl": "",
		"useGeneratedPwds": true,
		"mariadbRootPwd": "",
		"mariadbReplicatorPwd": "",
		"srmDatabaseUserPwd": "",
		"adminPwd": "",
		"toolServiceApiKey": "",
		"minioAdminPwd": "",
		"k8sProvider": "Other",
		"kubeApiTargetPort": "443",
		"clusterCertificateAuthorityCertPath": "",
		"csrSignerName": "",
		"createSCCs": false,
		"scanFarmType": 0,
		"skipDatabase": false,
		"useTriageAssistant": true,
		"skipScanFarm": true,
		"skipToolOrchestration": false,
		"skipMinIO": false,
		"skipNetworkPolicies": true,
		"skipTls": true,
		"workflowStorageType": "OnCluster",
		"serviceAccountToolService": "",
		"serviceAccountWorkflow": "",
		"toolServiceReplicas": 0,
		"dbSlaveReplicaCount": 0,
		"externalDatabaseHost": "",
		"externalDatabasePort": 3306,
		"externalDatabaseName": "",
		"externalDatabaseUser": "",
		"externalDatabasePwd": "",
		"externalDatabaseSkipTls": false,
		"externalDatabaseTrustCert": false,
		"externalDatabaseServerCert": "",
		"externalWorkflowStorageEndpoint": "",
		"externalWorkflowStorageEndpointSecure": false,
		"externalWorkflowStorageUsername": "",
		"externalWorkflowStoragePwd": "",
		"externalWorkflowStorageBucketName": "",
		"externalWorkflowStorageTrustCert": false,
		"externalWorkflowStorageCertChainPath": "",
		"addExtraCertificates": false,
		"extraTrustedCaCertPaths": null,
		"webServiceType": "ClusterIP",
		"webServicePortNumber": "9090",
		"webServiceAnnotations": [],
		"skipIngressEnabled": true,
		"ingressType": "ClusterIP",
		"ingressClassName": "",
		"ingressAnnotations": [],
		"ingressHostname": "",
		"ingressTlsSecretName": "",
		"ingressTlsType": "",
		"useSaml": false,
		"useLdap": false,
		"samlHostBasePath": "",
		"samlIdentityProviderMetadataPath": "",
		"samlAppName": "",
		"samlKeystorePwd": "",
		"samlPrivateKeyPwd": "",
		"skipDockerRegistryCredential": true,
		"dockerImagePullSecretName": "",
		"dockerRegistry": "",
		"dockerRegistryUser": "",
		"dockerRegistryPwd": "",
		"useDefaultDockerImages": true,
		"imageVersionWeb": "",
		"imageVersionMariaDB": "",
		"imageVersionTo": "",
		"imageVersionMinio": "",
		"imageVersionWorkflow": "",
		"useDockerRedirection": false,
		"useDockerRepositoryPrefix": false,
		"dockerRepositoryPrefix": "",
		"useDefaultCACerts": true,
		"caCertsFilePath": "",
		"caCertsFilePwd": "",
		"useCPUDefaults": false,
		"webCPUReservation": "",
		"dbMasterCPUReservation": "",
		"dbSlaveCPUReservation": "",
		"toolServiceCPUReservation": "",
		"minioCPUReservation": "",
		"workflowCPUReservation": "",
		"useMemoryDefaults": false,
		"webMemoryReservation": "",
		"dbMasterMemoryReservation": "",
		"dbSlaveMemoryReservation": "",
		"toolServiceMemoryReservation": "",
		"minioMemoryReservation": "",
		"workflowMemoryReservation": "",
		"useEphemeralStorageDefaults": false,
		"webEphemeralStorageReservation": "",
		"dbMasterEphemeralStorageReservation": "",
		"dbSlaveEphemeralStorageReservation": "",
		"toolServiceEphemeralStorageReservation": "",
		"minioEphemeralStorageReservation": "",
		"workflowEphemeralStorageReservation": "",
		"useVolumeSizeDefaults": false,
		"webVolumeSizeGiB": 0,
		"dbVolumeSizeGiB": 0,
		"dbSlaveVolumeSizeGiB": 0,
		"dbSlaveBackupVolumeSizeGiB": 0,
		"minioVolumeSizeGiB": 0,
		"storageClassName": "",
		"systemSize": "Small",
		"useNodeSelectors": false,
		"webNodeSelector": null,
		"masterDatabaseNodeSelector": null,
		"subordinateDatabaseNodeSelector": null,
		"toolServiceNodeSelector": null,
		"minioNodeSelector": null,
		"workflowControllerNodeSelector": null,
		"toolNodeSelector": null,
		"useTolerations": false,
		"webNoScheduleExecuteToleration": null,
		"masterDatabaseNoScheduleExecuteToleration": null,
		"subordinateDatabaseNoScheduleExecuteToleration": null,
		"toolServiceNoScheduleExecuteToleration": null,
		"minioNoScheduleExecuteToleration": null,
		"workflowControllerNoScheduleExecuteToleration": null,
		"toolNoScheduleExecuteToleration": null,
		"authCookieSecure": false,
		"notes": [],
		"salts": [],
		"isLocked": false,
		"scanFarmScaApiUrlOverride": ""
		}
'@.Replace('~/.k8s-srm', $workDirPath) | Out-File $configJsonPath

		$licenseFilePath = Join-Path $TestDrive 'srm-web-license'
		Write-Output $null > $licenseFilePath

		. (Join-Path $PSScriptRoot ../../helm-prep.ps1) -configPath $configJsonPath

		$valuesPath = Join-Path $TestDrive 'chart-values-combined/values-combined.yaml'

		$yaml = Get-Yaml $valuesPath

		$yaml.GetKeyValue(('web','props','auth','cookie','secure')) | Should -BeExactly 'false'
	}
}