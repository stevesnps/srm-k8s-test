apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "srm-web.props.configMapName" . | quote }}
  labels:
    {{- include "srm-web.labels" . | nindent 4 }}
data:
  {{- $tlsOpts := "" -}}
  {{- if .Values.mariadb.master.masterTlsSecret -}}
  {{-   $tlsOpts = "?useSSL=true&requireSSL=true" -}}
  {{- end -}}
  {{- $dbUrl := (printf "jdbc:mysql://%s/codedx%s" (include "srm-web.db.fullname" .) $tlsOpts) -}}
  {{- if not .Values.features.mariadb -}}
  {{-   $dbUrl = (required ".Values.web.database.externalDbUrl must be specified when using an external MariaDB instance" .Values.web.database.externalDbUrl) -}}
  {{- end -}}

  {{- if contains "?" $dbUrl -}}
  {{-   $dbUrl = (printf "%s&" $dbUrl) -}}
  {{- else -}}
  {{-   $dbUrl = (printf "%s?" $dbUrl) -}}
  {{- end -}}

  {{- $sessionVariables := "sessionVariables=sql_mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'" -}}
  {{- $dbUrl = (printf "%s%s" $dbUrl $sessionVariables) -}}

  {{- $useDatabasePublicKey := and (not .Values.features.mariadb) (not (empty (.Values.web.database.publicKeyConfigMap))) -}}
  {{- if $useDatabasePublicKey -}}
  {{-   $dbUrl = (printf "%s&serverRsaPublicKeyFile=%s" $dbUrl (include "srm-web.database.pubkey.path" .)) -}}
  {{- end }}

  {{ include "srm-web.main.props.filename" . }}: |-
    swa.db.url = {{ $dbUrl }}
    swa.db.driver = com.mysql.jdbc.Driver
    swa.jobs.cpu-limit = {{ include "srm.sizing.webJobLimitCPU" . }}
    swa.jobs.memory-limit = {{ include "srm.sizing.webJobLimitMemory" . }}
    swa.jobs.database-limit = {{ include "srm.sizing.webJobLimitDB" . }}
    swa.jobs.disk-limit = {{ include "srm.sizing.webJobLimitDisk" . }}
    analysis.concurrent-analysis-limit = {{ include "srm.sizing.webConcurrentAnalyses" . }}
    auth.cookie.secure = {{ .Values.web.props.auth.cookie.secure }}

  {{ include "srm-web.connection-pool.filename" . }}: |-
    maximumPoolSize = {{ include "srm.sizing.webConnectionPoolSize" . }}
    connectionTimeout={{ .Values.web.props.limits.database.timeout }}

  tomcat.env: |-
    CATALINA_OPTS='{{ include "srm-web.props.system-properties" . }}'
    {{- if .Values.web.licenseSecret }}
    CATALINA_OPTS="$CATALINA_OPTS -Dsrm.mounted-license-filename={{ include "srm-web.license.filename" . }}"
    {{- end }}
    CATALINA_OPTS="$CATALINA_OPTS {{ default "" .Values.web.javaOpts }}"
    CATALINA_OPTS="$CATALINA_OPTS -Dcodedx.autoupdate=true"
    CATALINA_OPTS="$CATALINA_OPTS -Dsrm.webapp-name={{ include "srm-web.appName" . }}"
    keystoreKeyFile='{{ include "srm-web.cacerts.password.path" . }}'
    if [ -f $keystoreKeyFile ] && [ -s $keystoreKeyFile ]; then
      keystoreKey=$(<$keystoreKeyFile)
      CATALINA_OPTS="$CATALINA_OPTS -Djavax.net.ssl.keystorepassword='$keystoreKey'"
    fi

  {{ include "srm-web.ml.props.filename" . }}: |-
    codedx.internal-url = {{ include "srm-web.serviceurl" . | quote }}

  {{ include "srm-web.logback.filename" . }}: |-
    <configuration>
      <appender name="logFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${codedx.log.dir}/codedx.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <!-- rollover daily -->
          <fileNamePattern>${codedx.log.dir}/codedx-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
          <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <!-- or whenever the file size reaches 100MB -->
            <maxFileSize>100MB</maxFileSize>
          </timeBasedFileNamingAndTriggeringPolicy>
          <!-- keep 7 days worth of history -->
          <maxHistory>7</maxHistory>
          <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
          <pattern>%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %logger{36} - %msg%n</pattern>
        </encoder>
      </appender>
      <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <pattern>%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %logger{36} - %msg%n</pattern>
        </encoder>
      </appender>
      <logger name="net.liftweb" level="WARN" />
      <logger name="org.pac4j.saml" level="WARN" />
      <logger name="org.apache.velocity" level="ERROR" />
      <root level="INFO">
        <appender-ref ref="logFile" />
        <appender-ref ref="stdout" />
      </root>
    </configuration>

  {{ range .Values.web.props.extra }}
  {{ if eq (required ".Values.web.props.extra entries must have a 'type' defined!" .type) "values" -}}
  {{ .key }}: |-
    {{- range .values -}}
    {{- . | nindent 4 }}
    {{- end -}}
  {{- end }}
  {{- end }}

  {{- if .Values.features.to }}
  {{ include "srm-web.to.props.filename" . }}: |-
    tws.enabled = true
    tws.service-url = {{ include "srm-to.serviceurl" . }}
  {{- end }}

  {{ if .Values.web.authentication.saml.enabled -}}
  {{ include "srm-web.saml.props.filename" . }}: |-
    auth.saml2.identityProviderMetadataPath = "{{ include "srm-web.appdata.path" . }}/{{ include "srm-web.saml-idp.filename" . }}"
    auth.hostBasePath = {{ .Values.web.authentication.saml.hostBasePath | quote }}
    auth.saml2.entityId = {{ .Values.web.authentication.saml.appName | quote }}
  {{- end -}}

  {{- if .Values.features.scanfarm }}
  {{ include "srm-web.sf.props.filename" . }}: |-
    scan-service.url = {{ include "srm-sf.scanSvcUrl" . }}
    storage-service.url = {{ include "srm-sf.storageSvcUrl" . }}
    coverity.version-to-run = {{ .Values.web.scanfarm.sast.version }}
    blackduck.version-to-run = {{ .Values.web.scanfarm.sca.version }}
  {{- end }}
